import N from"jsonwebtoken";import S from"jwks-rsa";function w(e,t){let r={},n=t;return t.length&&typeof t[0]=="object"&&t[0]&&t[0].requestId&&(r=t[0],n=t.slice(1)),JSON.stringify({level:e,time:new Date().toISOString(),...r,msg:n.map(String).join(" ")})}function u(...e){console.log(w("info",e))}function i(...e){console.error(w("error",e))}var T=process.env.AWS_REGION||process.env.AWS_DEFAULT_REGION||"us-west-2",y=process.env.COGNITO_USER_POOL_ID,I=process.env.COGNITO_CLIENT_ID,g=null;function A(){if(!g&&y){let e=`https://cognito-idp.${T}.amazonaws.com/${y}/.well-known/jwks.json`;g=S({jwksUri:e,requestHeaders:{},timeout:3e4,cache:!0,cacheMaxEntries:5,cacheMaxAge:6e5})}return g}function E(e,t){let r=A();if(!r)return t(new Error("JWKS client not initialized"));r.getSigningKey(e.kid,(n,o)=>{if(n)return t(n);let s=o.publicKey||o.rsaPublicKey;t(null,s)})}async function J(e){if(!e)throw new Error("No token provided");if(!y||!I)throw new Error("Cognito configuration missing");return new Promise((t,r)=>{N.verify(e,E,{audience:I,issuer:`https://cognito-idp.${T}.amazonaws.com/${y}`,algorithms:["RS256"]},(n,o)=>{n?r(new Error(`JWT verification failed: ${n.message}`)):t(o)})})}function x(e){if(!e||typeof e!="string")return null;let t=e.match(/^Bearer\s+(.+)$/i);return t?t[1]:null}function k(e){let t=e["custom:user_role"]||e.user_role||e["cognito:groups"]?.[0]||"viewer";return["viewer","editor","owner"].includes(t.toLowerCase())?t.toLowerCase():"viewer"}function f(e,t){let r={viewer:1,editor:2,owner:3},n=r[e]||0,o=r[t]||0;return n>=o}async function O(e){try{let t=e.headers?.Authorization||e.headers?.authorization,r=x(t);if(!r)throw new Error("No authorization token provided");let n=await J(r),o=k(n);return{userId:n.sub,email:n.email,role:o,cognitoUsername:n["cognito:username"],tokenExp:n.exp,tokenIat:n.iat,claims:n}}catch(t){throw i("Authentication failed:",t.message),new Error(`Authentication failed: ${t.message}`)}}var a={unauthorized:(e="Unauthorized")=>({statusCode:401,headers:{"Content-Type":"application/json"},body:JSON.stringify({error:e})}),forbidden:(e="Forbidden - insufficient permissions")=>({statusCode:403,headers:{"Content-Type":"application/json"},body:JSON.stringify({error:e})})};import{DynamoDBClient as _}from"@aws-sdk/client-dynamodb";import{DynamoDBDocumentClient as R}from"@aws-sdk/lib-dynamodb";var c=process.env.TRIPS_TABLE||"daylight_trips",D=process.env.AWS_REGION||process.env.AWS_DEFAULT_REGION||"us-west-2",P=new _({region:D}),p=R.from(P,{marshallOptions:{removeUndefinedValues:!0}});import{GetCommand as h,PutCommand as C,DeleteCommand as v}from"@aws-sdk/lib-dynamodb";var oe=async e=>{let t=e.requestContext?.requestId||"unknown";try{let r=await O(e);u({requestId:t,userId:r.userId},`${e.requestContext.http.method} /trips`,{role:r.role});let n=e.requestContext.http.method,o=e.pathParameters?.tripId;switch(n){case"POST":return await j(e,r,t);case"GET":return o?await G(o,r,t):await L(r,t);case"PUT":return o?await U(o,e,r,t):{statusCode:400,body:JSON.stringify({error:"Trip ID required"})};case"DELETE":return o?await $(o,r,t):{statusCode:400,body:JSON.stringify({error:"Trip ID required"})};default:return{statusCode:405,body:JSON.stringify({error:"Method not allowed"})}}}catch(r){return i({requestId:t},"Trip handler error:",r.message),r.message.includes("Authentication failed")||r.message.includes("No authorization token")?a.unauthorized(r.message):{statusCode:500,body:JSON.stringify({error:"Internal server error"})}}};async function j(e,t,r){if(!f(t.role,"viewer"))return a.forbidden();if(!e.body)return{statusCode:400,body:JSON.stringify({error:"Request body required"})};let n;try{n=JSON.parse(e.body)}catch{return{statusCode:400,body:JSON.stringify({error:"Invalid JSON"})}}let o=n.tripId||`trip_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,s=new Date().toISOString(),d={tripId:o,userId:t.userId,name:n.name||"Untitled Trip",startsAt:n.startsAt||s,endsAt:n.endsAt||s,anchors:n.anchors||[],createdAt:s,updatedAt:s};try{return await p.send(new C({TableName:c,Item:{pk:`TRIP#${o}`,sk:"META",...d}})),u({requestId:r,userId:t.userId},"Trip created",{tripId:o}),{statusCode:201,headers:{"Content-Type":"application/json"},body:JSON.stringify({tripId:o,message:"Trip created successfully"})}}catch(m){return i({requestId:r},"Failed to create trip:",m.message),{statusCode:500,body:JSON.stringify({error:"Failed to create trip"})}}}async function G(e,t,r){try{let n=await p.send(new h({TableName:c,Key:{pk:`TRIP#${e}`,sk:"META"}}));if(!n.Item)return{statusCode:404,body:JSON.stringify({error:"Trip not found"})};let o=n.Item;if(!(o.userId===t.userId||o.sharedWith?.includes(t.userId)||t.role==="owner"))return a.forbidden("Access denied to this trip");let{pk:d,sk:m,...l}=o;return u({requestId:r,userId:t.userId},"Trip retrieved",{tripId:e}),{statusCode:200,headers:{"Content-Type":"application/json"},body:JSON.stringify(l)}}catch(n){return i({requestId:r},"Failed to get trip:",n.message),{statusCode:500,body:JSON.stringify({error:"Failed to retrieve trip"})}}}async function L(e,t){return u({requestId:t,userId:e.userId},"List user trips requested"),{statusCode:200,headers:{"Content-Type":"application/json"},body:JSON.stringify({trips:[],message:"Trip listing requires GSI implementation",userId:e.userId,role:e.role})}}async function U(e,t,r,n){if(!f(r.role,"editor"))return a.forbidden("Editor permission required");if(!t.body)return{statusCode:400,body:JSON.stringify({error:"Request body required"})};let o;try{o=JSON.parse(t.body)}catch{return{statusCode:400,body:JSON.stringify({error:"Invalid JSON"})}}try{let s=await p.send(new h({TableName:c,Key:{pk:`TRIP#${e}`,sk:"META"}}));if(!s.Item)return{statusCode:404,body:JSON.stringify({error:"Trip not found"})};let d=s.Item;if(!(d.userId===r.userId||d.sharedWith?.includes(r.userId)||r.role==="owner"))return a.forbidden("Access denied to this trip");let l={...d,...o,updatedAt:new Date().toISOString(),tripId:e,userId:d.userId};await p.send(new C({TableName:c,Item:l}));let{pk:q,sk:F,...b}=l;return u({requestId:n,userId:r.userId},"Trip updated",{tripId:e}),{statusCode:200,headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}}catch(s){return i({requestId:n},"Failed to update trip:",s.message),{statusCode:500,body:JSON.stringify({error:"Failed to update trip"})}}}async function $(e,t,r){if(!f(t.role,"owner"))return a.forbidden("Owner permission required");try{let n=await p.send(new h({TableName:c,Key:{pk:`TRIP#${e}`,sk:"META"}}));return n.Item?n.Item.userId===t.userId||t.role==="owner"?(await p.send(new v({TableName:c,Key:{pk:`TRIP#${e}`,sk:"META"}})),u({requestId:r,userId:t.userId},"Trip deleted",{tripId:e}),{statusCode:204,headers:{"Content-Type":"application/json"},body:""}):a.forbidden("Only trip owner can delete"):{statusCode:404,body:JSON.stringify({error:"Trip not found"})}}catch(n){return i({requestId:r},"Failed to delete trip:",n.message),{statusCode:500,body:JSON.stringify({error:"Failed to delete trip"})}}}export{oe as handler};
