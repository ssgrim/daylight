function P(){let e=new Map;return{async get(n){let t=e.get(n);if(t){if(Date.now()>t.expires){e.delete(n);return}return t.value}},async set(n,t,o=6e4){e.set(n,{value:t,expires:Date.now()+o})},async clear(){e.clear()}}}var w=new Map,h=P();function I(){return`trip_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async function O(e,n){let t=I(),o=new Date().toISOString(),c={tripId:t,ownerId:n,name:e.name||"Untitled Trip",description:e.description,status:e.status||"draft",tags:e.tags||[],isPublic:e.isPublic||!1,createdAt:o,updatedAt:o,anchors:e.anchors||[],preferences:e.preferences,metadata:e.metadata};return w.set(t,c),h&&await h.clear(),c}async function N(e,n){let t=w.get(e);return!t||t.ownerId!==n?null:t}async function J(e,n,t){let o=w.get(e);if(!o||o.ownerId!==t)return null;let c={...o,...n,tripId:e,ownerId:t,updatedAt:new Date().toISOString()};return w.set(e,c),h&&await h.clear(),c}async function E(e,n){let t=w.get(e);return!t||t.ownerId!==n?!1:(w.delete(e),h&&await h.clear(),!0)}async function v(e){let{limit:n=20,sortBy:t="createdAt",sortOrder:o="desc",status:c,tag:u,search:f,lastKey:s,ownerId:r}=e,d=`trips:search:${JSON.stringify(e)}`;if(h){let i=await h.get(d);if(i)return i}let a=Array.from(w.values()).filter(i=>!r||i.ownerId===r);if(c&&(a=a.filter(i=>i.status===c)),u&&(a=a.filter(i=>i.tags.includes(u))),f){let i=f.toLowerCase();a=a.filter(y=>y.name.toLowerCase().includes(i)||y.description&&y.description.toLowerCase().includes(i)||y.tags.some(g=>g.toLowerCase().includes(i)))}a.sort((i,y)=>{let g,T;switch(t){case"name":g=i.name.toLowerCase(),T=y.name.toLowerCase();break;case"updatedAt":g=new Date(i.updatedAt).getTime(),T=new Date(y.updatedAt).getTime();break;case"createdAt":default:g=new Date(i.createdAt).getTime(),T=new Date(y.createdAt).getTime();break}return o==="asc"?g<T?-1:g>T?1:0:g>T?-1:g<T?1:0});let l=0;if(s)try{let y=JSON.parse(Buffer.from(s,"base64").toString()).tripId;l=a.findIndex(g=>g.tripId===y)+1}catch{l=0}let p=Math.min(l+n,a.length),m=a.slice(l,p),b=p<a.length,S;if(b&&m.length>0){let i=m[m.length-1];S=Buffer.from(JSON.stringify({tripId:i.tripId})).toString("base64")}let C={items:m,count:m.length,hasMore:b,lastKey:S};return h&&await h.set(d,C,6e4),C}async function L(e,n){let t=e.toLowerCase(),o=Array.from(w.values()).filter(s=>s.ownerId===n),c=new Set,u=new Set,f=new Set;return o.forEach(s=>{if(s.name.toLowerCase().includes(t)&&c.add(s.name),s.tags.forEach(r=>{r.toLowerCase().includes(t)&&u.add(r)}),s.description&&s.description.toLowerCase().includes(t)){let r=s.description.split(" ");r.forEach((d,a)=>{d.toLowerCase().includes(t)&&r.length>a+1&&f.add(r.slice(a,a+3).join(" "))})}}),{names:Array.from(c).slice(0,5),tags:Array.from(u).slice(0,10),descriptions:Array.from(f).slice(0,5)}}async function x(e){let n=Array.from(w.values()).filter(s=>s.ownerId===e),t={},o={},c=0,u=new Date(Date.now()-7*24*60*60*1e3).getTime();n.forEach(s=>{t[s.status]=(t[s.status]||0)+1,s.tags.forEach(r=>{o[r]=(o[r]||0)+1}),new Date(s.updatedAt).getTime()>u&&c++});let f=Object.entries(o).map(([s,r])=>({tag:s,count:r})).sort((s,r)=>r.count-s.count).slice(0,10);return{total:n.length,byStatus:t,topTags:f,recentActivity:c}}async function M(){let e=[{name:"Mountain Adventure",description:"Epic hiking in the Rocky Mountains with stunning views",status:"active",tags:["hiking","mountains","adventure","nature"],isPublic:!0,anchors:[{lat:40.3772,lng:-105.5217,name:"Rocky Mountain National Park"},{lat:40.4619,lng:-105.5378,name:"Bear Lake Trailhead"}]},{name:"City Food Tour",description:"Exploring the best restaurants and food trucks in downtown",status:"completed",tags:["food","city","restaurants","culture"],isPublic:!1,anchors:[{lat:39.7392,lng:-104.9903,name:"Denver Downtown"},{lat:39.7516,lng:-104.9969,name:"RiNo District"}]},{name:"Beach Relaxation",description:"A peaceful weekend by the ocean with sun and surf",status:"draft",tags:["beach","relaxation","ocean","weekend"],isPublic:!0,anchors:[{lat:32.7157,lng:-117.1611,name:"La Jolla Cove"},{lat:32.6801,lng:-117.234,name:"Sunset Cliffs"}]}],n="user-123";for(let t of e)await O(t,n);console.log("Sample trip data initialized")}var A=!1;async function k(){A||(await M(),A=!0)}function q(e){let n=e.headers?.authorization||e.headers?.Authorization;return n&&n.startsWith("Bearer ")?"user-123":"anonymous"}function D(e){return e?{limit:e.limit?Math.min(Math.max(parseInt(e.limit),1),100):20,sortBy:["createdAt","updatedAt","name"].includes(e.sortBy||"")?e.sortBy:"createdAt",sortOrder:["asc","desc"].includes(e.sortOrder||"")?e.sortOrder:"desc",status:e.status,tag:e.tag,search:e.search,lastKey:e.lastKey}:{}}var R=async e=>{let{requestContext:n,body:t,pathParameters:o,queryStringParameters:c}=e,u=n.http.method,f=n.http.path;await k();let s=q(e),r={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization","Content-Type":"application/json"};try{if(u==="OPTIONS")return{statusCode:204,headers:r};if(u==="GET"&&f.includes("/suggestions")){let a=c?.q||"";if(!a)return{statusCode:400,headers:r,body:JSON.stringify({error:'Query parameter "q" is required'})};let l=await L(a,s);return{statusCode:200,headers:r,body:JSON.stringify(l)}}if(u==="GET"&&f.includes("/stats")){let a=await x(s);return{statusCode:200,headers:r,body:JSON.stringify(a)}}let d=o?.id||o?.tripId;if(d)switch(u){case"GET":let a=await N(d,s);return a?{statusCode:200,headers:r,body:JSON.stringify(a)}:{statusCode:404,headers:r,body:JSON.stringify({error:"Trip not found"})};case"PUT":if(!t)return{statusCode:400,headers:r,body:JSON.stringify({error:"Request body is required"})};let l;try{l=JSON.parse(t)}catch{return{statusCode:400,headers:r,body:JSON.stringify({error:"Invalid JSON in request body"})}}let p=await J(d,l,s);return p?{statusCode:200,headers:r,body:JSON.stringify({message:"Trip updated successfully",trip:p})}:{statusCode:404,headers:r,body:JSON.stringify({error:"Trip not found"})};case"DELETE":return await E(d,s)?{statusCode:200,headers:r,body:JSON.stringify({message:"Trip deleted successfully"})}:{statusCode:404,headers:r,body:JSON.stringify({error:"Trip not found"})}}switch(u){case"GET":let a=D(c||null);a.ownerId=s;let l=await v(a);return{statusCode:200,headers:r,body:JSON.stringify(l)};case"POST":if(!t)return{statusCode:400,headers:r,body:JSON.stringify({error:"Request body is required"})};let p;try{p=JSON.parse(t)}catch{return{statusCode:400,headers:r,body:JSON.stringify({error:"Invalid JSON in request body"})}}if(!p.name)return{statusCode:400,headers:r,body:JSON.stringify({error:"Trip name is required"})};let m=await O(p,s);return{statusCode:201,headers:r,body:JSON.stringify({tripId:m.tripId,message:"Trip created successfully",trip:m})};default:return{statusCode:405,headers:r,body:JSON.stringify({error:"Method not allowed"})}}}catch(d){return console.error("Error in trips handler:",d),{statusCode:500,headers:r,body:JSON.stringify({error:"Internal server error",message:d instanceof Error?d.message:String(d)})}}};export{R as handler};
