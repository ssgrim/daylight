# Production Environment Configuration Template
# Copy this file to prod.tfvars and fill in your values

# Basic Configuration
project_name = "daylight"
environment  = "prod"
aws_region   = "us-west-1"
owner        = "your-team-name"

# Logging (longer retention for production)
log_retention_days = 30

# Database configuration
database_config = {
  billing_mode = "PAY_PER_REQUEST"  # Or "PROVISIONED" with read/write capacity
  
  trips_table = {
    hash_key = "tripId"
    attributes = [
      {
        name = "tripId"
        type = "S"
      }
    ]
    # Remove TTL in production for data persistence
    # ttl_attribute = "expiresAt"
  }
  
  enable_cache_table = true
  cache_table = {
    hash_key = "cacheKey"
    attributes = [
      {
        name = "cacheKey"
        type = "S"
      }
    ]
    ttl_attribute = "ttl"
  }
  
  enable_point_in_time_recovery       = true   # Enable for production
  enable_cache_point_in_time_recovery = false  # Cache can be rebuilt
  enable_cloudwatch_alarms           = true   # Enable monitoring
}

# API configuration
api_config = {
  lambda_runtime = "nodejs20.x"
  
  lambda_functions = {
    trips = {
      handler     = "trips.handler"
      zip_file    = "../../backend/dist/trips.zip"
      timeout     = 30
      memory_size = 1024  # More memory for production
    }
    plan = {
      handler     = "plan.handler"
      zip_file    = "../../backend/dist/plan.zip"
      timeout     = 30
      memory_size = 1024  # More memory for production
    }
    health = {
      handler     = "health.handler"
      zip_file    = "../../backend/dist/health.zip"
      timeout     = 10
      memory_size = 256
    }
  }
  
  api_routes = {
    get_plan = {
      method        = "GET"
      path         = "/plan"
      function_name = "plan"
    }
    post_trips = {
      method        = "POST"
      path         = "/trips"
      function_name = "trips"
    }
    get_trips = {
      method        = "GET"
      path         = "/trips"
      function_name = "trips"
    }
    health_check = {
      method        = "GET"
      path         = "/health"
      function_name = "health"
    }
  }
  
  environment_variables = {
    NODE_ENV     = "production"
    LOG_LEVEL    = "info"
    CACHE_TTL    = "3600"  # 1 hour in production
  }
  
  enable_external_api_access = true
  
  cors_configuration = {
    allow_credentials = false
    allow_headers     = ["Content-Type", "Authorization", "X-Amz-Date", "X-Api-Key", "X-Amz-Security-Token"]
    allow_methods     = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allow_origins     = ["https://yourdomain.com"]  # Restrict to your domain
    max_age          = 86400
  }
  
  throttling_burst_limit = 5000   # Higher limits for production
  throttling_rate_limit  = 2000
  detailed_metrics_enabled = true
  
  # CloudWatch alarms for production monitoring
  enable_cloudwatch_alarms = true
  error_rate_threshold     = 5   # Lower threshold for production
}

# Frontend configuration
frontend_config = {
  force_destroy     = false  # Protect production bucket
  enable_versioning = true   # Enable versioning for rollbacks
  
  price_class = "PriceClass_All"  # Global distribution for production
  
  cache_behaviors = {
    default = {
      default_ttl = 300      # 5 minutes
      max_ttl     = 86400    # 1 day
    }
    assets = {
      path_pattern = "/assets/*"
      default_ttl  = 86400   # 1 day for assets
      max_ttl      = 31536000 # 1 year max
    }
    api = {
      path_pattern = "/api/*"
      default_ttl  = 0       # No caching for API
      max_ttl      = 0
    }
  }
  
  enable_cloudfront_logs = true  # Enable access logs for production
}

# Security and monitoring for production
create_secrets_manager       = true
create_application_log_group = true
create_alarm_topic          = true

# API Protection (WAF)
enable_waf = true
waf_rate_limit = 2000  # Reasonable rate limit for production
waf_rate_limit_action = "BLOCK"  # Block mode for production

# Secrets (fill in your actual values)
google_places_api_key = "your_google_places_api_key_here"
mapbox_access_token   = "pk.your_mapbox_access_token_here"

# Monitoring
alarm_email = "alerts@yourdomain.com"
