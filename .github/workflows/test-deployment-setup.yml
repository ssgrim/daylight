name: Test Deployment Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  AWS_REGION: us-west-1

jobs:
  test-setup:
    name: Test AWS Credentials and Resources
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Test AWS credentials
      run: |
        echo "üîë Testing AWS credentials..."
        aws sts get-caller-identity
        echo "‚úÖ AWS credentials working"
        
    - name: Test Lambda functions access
      run: |
        echo "üì¶ Testing Lambda functions access..."
        
        # Test trips function
        aws lambda get-function --function-name "daylight-trips-${{ github.event.inputs.environment }}" > /dev/null
        echo "‚úÖ trips function accessible"
        
        # Test plan function
        aws lambda get-function --function-name "daylight-plan-${{ github.event.inputs.environment }}" > /dev/null
        echo "‚úÖ plan function accessible"
        
    - name: Test S3 bucket access
      run: |
        echo "üìÇ Testing S3 bucket access..."
        BUCKET_NAME="${{ secrets.DEV_S3_BUCKET_NAME }}"
        
        if [ -z "$BUCKET_NAME" ]; then
          echo "‚ùå DEV_S3_BUCKET_NAME secret not set"
          exit 1
        fi
        
        aws s3 ls "s3://$BUCKET_NAME/" > /dev/null
        echo "‚úÖ S3 bucket accessible: $BUCKET_NAME"
        
    - name: Test CloudFront distribution access
      run: |
        echo "üåê Testing CloudFront distribution access..."
        DISTRIBUTION_ID="${{ secrets.DEV_CLOUDFRONT_DISTRIBUTION_ID }}"
        
        if [ -z "$DISTRIBUTION_ID" ]; then
          echo "‚ùå DEV_CLOUDFRONT_DISTRIBUTION_ID secret not set"
          exit 1
        fi
        
        aws cloudfront get-distribution --id "$DISTRIBUTION_ID" > /dev/null
        echo "‚úÖ CloudFront distribution accessible: $DISTRIBUTION_ID"
        
    - name: Test API endpoint
      run: |
        echo "üöÄ Testing API endpoint..."
        API_URL="${{ secrets.DEV_API_BASE_URL }}"
        
        if [ -z "$API_URL" ]; then
          echo "‚ùå DEV_API_BASE_URL secret not set"
          exit 1
        fi
        
        echo "Testing: $API_URL/health"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ API endpoint responding: $API_URL"
        else
          echo "‚ö†Ô∏è  API endpoint returned HTTP $response (might be expected if not deployed yet)"
        fi
        
    - name: Test frontend domain
      run: |
        echo "üåç Testing frontend domain..."
        DOMAIN="${{ secrets.DEV_DOMAIN_NAME }}"
        
        if [ -z "$DOMAIN" ]; then
          echo "‚ùå DEV_DOMAIN_NAME secret not set"
          exit 1
        fi
        
        echo "Testing: https://$DOMAIN"
        response=$(curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Frontend responding: https://$DOMAIN"
        else
          echo "‚ö†Ô∏è  Frontend returned HTTP $response (might be expected if not deployed yet)"
        fi
        
    - name: Summary
      run: |
        echo ""
        echo "üéâ Deployment setup test completed!"
        echo ""
        echo "‚úÖ Verified components:"
        echo "  ‚Ä¢ AWS credentials"
        echo "  ‚Ä¢ Lambda functions access"
        echo "  ‚Ä¢ S3 bucket access"
        echo "  ‚Ä¢ CloudFront distribution access"
        echo "  ‚Ä¢ API endpoint configuration"
        echo "  ‚Ä¢ Frontend domain configuration"
        echo ""
        echo "üöÄ Ready for automated deployment!"
        echo ""
        echo "Next step: Push to 'dev' branch to trigger deployment"
